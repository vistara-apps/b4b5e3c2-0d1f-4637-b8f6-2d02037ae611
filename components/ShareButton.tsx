'use client';

import { useState } from 'react';
import { Share2, Download, Link, Check } from 'lucide-react';
import { Incident } from '@/lib/types';
import { formatTimestamp } from '@/lib/utils';

interface ShareButtonProps {
  incident?: Incident;
  variant?: 'default';
  onShare?: (method: string) => void;
}

export function ShareButton({ 
  incident, 
  variant = 'default',
  onShare 
}: ShareButtonProps) {
  const [isSharing, setIsSharing] = useState(false);
  const [shareMethod, setShareMethod] = useState<string | null>(null);

  const generateSummary = (incident: Incident) => {
    return `
INCIDENT SUMMARY - ${formatTimestamp(incident.timestamp)}

Location: ${incident.location.city}, ${incident.location.state}
Duration: ${incident.duration ? Math.floor(incident.duration / 60) : 0} minutes
Status: ${incident.status}

Rights Information:
${incident.rightsInfoSummary}

Notes: ${incident.notes || 'No additional notes'}

Generated by Guardiant - Your Pocket Rights Advisor
    `.trim();
  };

  const handleShare = async (method: string) => {
    if (!incident) return;

    setIsSharing(true);
    setShareMethod(method);

    try {
      const summary = generateSummary(incident);

      switch (method) {
        case 'native':
          if (navigator.share) {
            await navigator.share({
              title: 'Incident Summary - Guardiant',
              text: summary,
              url: window.location.href
            });
          }
          break;

        case 'copy':
          await navigator.clipboard.writeText(summary);
          break;

        case 'download':
          const blob = new Blob([summary], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `incident-${incident.incidentId}.txt`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          break;
      }

      if (onShare) {
        onShare(method);
      }

    } catch (error) {
      console.error('Share failed:', error);
    } finally {
      setIsSharing(false);
      setTimeout(() => setShareMethod(null), 2000);
    }
  };

  if (!incident) {
    return (
      <div className="glass-card p-4 text-center">
        <p className="text-gray-400 text-sm">No incident to share</p>
      </div>
    );
  }

  return (
    <div className="glass-card p-4">
      <h3 className="font-medium text-white mb-4 flex items-center space-x-2">
        <Share2 className="w-5 h-5" />
        <span>Share Incident Summary</span>
      </h3>

      <div className="space-y-3">
        {/* Native Share (if supported) */}
        {typeof navigator !== 'undefined' && 'share' in navigator && (
          <button
            onClick={() => handleShare('native')}
            disabled={isSharing}
            className="w-full btn-secondary flex items-center justify-center space-x-2"
          >
            {shareMethod === 'native' ? (
              <Check className="w-4 h-4 text-green-400" />
            ) : (
              <Share2 className="w-4 h-4" />
            )}
            <span>Share</span>
          </button>
        )}

        {/* Copy to Clipboard */}
        <button
          onClick={() => handleShare('copy')}
          disabled={isSharing}
          className="w-full btn-secondary flex items-center justify-center space-x-2"
        >
          {shareMethod === 'copy' ? (
            <Check className="w-4 h-4 text-green-400" />
          ) : (
            <Link className="w-4 h-4" />
          )}
          <span>Copy Summary</span>
        </button>

        {/* Download */}
        <button
          onClick={() => handleShare('download')}
          disabled={isSharing}
          className="w-full btn-secondary flex items-center justify-center space-x-2"
        >
          {shareMethod === 'download' ? (
            <Check className="w-4 h-4 text-green-400" />
          ) : (
            <Download className="w-4 h-4" />
          )}
          <span>Download</span>
        </button>
      </div>

      <div className="mt-4 p-3 bg-black bg-opacity-20 rounded-lg">
        <p className="text-xs text-gray-400 mb-2">Preview:</p>
        <p className="text-xs text-gray-300 line-clamp-3">
          {generateSummary(incident).substring(0, 150)}...
        </p>
      </div>
    </div>
  );
}
